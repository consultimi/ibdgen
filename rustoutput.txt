   Compiling celldesigner v0.1.0 (C:\Users\Miles\Documents\GitHub\celldesigner)
warning: unused import: `dmatrix`
 --> src\opt_block.rs:1:34
  |
1 | use nalgebra::{DMatrix, DVector, dmatrix};
  |                                  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unnecessary parentheses around assigned value
   --> src\opt_block.rs:371:25
    |
371 |             let index = (i * block_data.max_n + j);
    |                         ^                        ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
371 -             let index = (i * block_data.max_n + j);
371 +             let index = i * block_data.max_n + j;
    |

warning: value assigned to `log_det` is never read
  --> src\opt_block.rs:10:13
   |
10 |     let mut log_det = 0.0;
   |             ^^^^^^^
   |
   = help: maybe it is overwritten before being read?
   = note: `#[warn(unused_assignments)]` on by default

warning: variable `j` is assigned to, but never used
  --> src\opt_block.rs:20:17
   |
20 |         let mut j: i32=0;
   |                 ^
   |
   = note: consider using `_j` instead
   = note: `#[warn(unused_variables)]` on by default

warning: value assigned to `k_index` is never read
  --> src\opt_block.rs:99:13
   |
99 |     let mut k_index = 0;
   |             ^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `j`
   --> src\opt_block.rs:321:13
    |
321 |     let mut j = 0;
    |             ^ help: if this is intentional, prefix it with an underscore: `_j`

warning: unused variable: `l`
   --> src\opt_block.rs:322:13
    |
322 |     let mut l = 0;
    |             ^ help: if this is intentional, prefix it with an underscore: `_l`

warning: value assigned to `bs` is never read
   --> src\opt_block.rs:323:13
    |
323 |     let mut bs = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `t` is never read
   --> src\opt_block.rs:325:13
    |
325 |     let mut t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src\opt_block.rs:321:9
    |
321 |     let mut j = 0;
    |         ----^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src\opt_block.rs:322:9
    |
322 |     let mut l = 0;
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src\opt_block.rs:324:9
    |
324 |     let mut i_block = block_data.n_b * block_data.max_n;
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `tip`
   --> src\opt_block.rs:588:13
    |
588 |     let mut tip: DMatrix<f64> = DMatrix::zeros(block_data.n as usize, block_data.k as usize);
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_tip`

warning: unused variable: `w`
   --> src\opt_block.rs:589:13
    |
589 |     let mut w: DMatrix<f64> = DMatrix::zeros(block_data.k as usize * (block_data.k as usize + 1) / 2, 1);
    |             ^ help: if this is intentional, prefix it with an underscore: `_w`

warning: unused variable: `vec`
   --> src\opt_block.rs:590:13
    |
590 |     let mut vec: DVector<f64> = DVector::zeros(2 * block_data.k as usize);
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_vec`

warning: unused variable: `sc`
   --> src\opt_block.rs:591:13
    |
591 |     let mut sc: DVector<f64> = DVector::zeros(2 * block_data.k as usize);
    |             ^^ help: if this is intentional, prefix it with an underscore: `_sc`

warning: unused variable: `var`
   --> src\opt_block.rs:593:13
    |
593 |     let mut var = 0.0;
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_var`

warning: unused variable: `singular`
   --> src\opt_block.rs:597:13
    |
597 |     let mut singular = false;
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_singular`

warning: variable `av_var` is assigned to, but never used
   --> src\opt_block.rs:600:13
    |
600 |     let mut av_var = 0.0;
    |             ^^^^^^
    |
    = note: consider using `_av_var` instead

warning: value assigned to `av_var` is never read
   --> src\opt_block.rs:613:13
    |
613 |             av_var = make_ti_from_tb(block_data).map_err(|e| anyhow!("Failed to make ti from tb: {}", e))?;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `av_var` is never read
   --> src\opt_block.rs:637:29
    |
637 | ...                   av_var = make_ti_from_tb(block_data).map_err(|e| anyhow!("Failed to make ti from tb: {}", e))?;
    |                       ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src\opt_block.rs:588:9
    |
588 |     let mut tip: DMatrix<f64> = DMatrix::zeros(block_data.n as usize, block_data.k as usize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src\opt_block.rs:589:9
    |
589 |     let mut w: DMatrix<f64> = DMatrix::zeros(block_data.k as usize * (block_data.k as usize + 1) / 2, 1);
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src\opt_block.rs:590:9
    |
590 |     let mut vec: DVector<f64> = DVector::zeros(2 * block_data.k as usize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src\opt_block.rs:591:9
    |
591 |     let mut sc: DVector<f64> = DVector::zeros(2 * block_data.k as usize);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src\opt_block.rs:593:9
    |
593 |     let mut var = 0.0;
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src\opt_block.rs:597:9
    |
597 |     let mut singular = false;
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `x`
   --> src\opt_block.rs:821:13
    |
821 |         let x = dm7choose3();
    |             ^ help: if this is intentional, prefix it with an underscore: `_x`

warning: unused variable: `x`
   --> src\opt_block.rs:846:13
    |
846 |         let x = dm7choose3();
    |             ^ help: if this is intentional, prefix it with an underscore: `_x`

warning: function `dm9choose3` is never used
  --> src/main.rs:18:4
   |
18 | fn dm9choose3() -> DMatrix<u8> {
   |    ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: function `dm12choose4` is never used
  --> src/main.rs:32:4
   |
32 | fn dm12choose4() -> DMatrix<u8> {
   |    ^^^^^^^^^^^

warning: `celldesigner` (bin "celldesigner" test) generated 31 warnings (run `cargo fix --bin "celldesigner" --tests` to apply 11 suggestions)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.25s
     Running unittests src/main.rs (target\debug\deps\celldesigner-12ae5da5e9c66372.exe)

running 9 tests
test opt_block::tests::test_initialize_b ... ok
test opt_block::tests::test_form_block_means ... ok
test opt_block::tests::test_make_ti_from_tb ... ok
test opt_block::tests::test_rotate_b ... ok
test opt_block::tests::test_find_delta_block ... ok
test opt_block::tests::test_exchange_blocks ... ok
test opt_block::tests::test_reduce_x_to_t ... ok
test opt_block::tests::test_transform ... ok
test opt_block::tests::test_block_optimize ... ok

test result: ok. 9 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s

